import { WebSocket } from 'ws';
import { YandexCloudConfig, RealtimeSession, ServerEvent } from '../common/types.js';
import { toBuffer } from '../common/utils.js';
import { sanitizeStringsDeep } from './utils.js';
import { ToolsManager } from './tools.js';
import { transformYandexEvent } from './yandex-event-transform.js';
import { getRandomProfile, ProfileConfig } from './config/assistant-profile.js';
import { YandexTTS } from './yandex-tts.js';

export class YandexHandler {
  private yandexConfig: YandexCloudConfig;
  private toolsManager: ToolsManager;
  private pendingFunctionCalls: Map<string, string> = new Map();
  private pendingFunctionCallIds: Map<string, string> = new Map();
  private logTimestamps: Map<string, number> = new Map();
  private sendToClient: (session: RealtimeSession, event: ServerEvent) => void;
  private selectedProfile: ProfileConfig | null = null;
  private tts: YandexTTS;

  constructor(
    config: YandexCloudConfig,
    sendToClient: (session: RealtimeSession, event: ServerEvent) => void
  ) {
    this.yandexConfig = config;
    this.toolsManager = new ToolsManager();
    this.sendToClient = sendToClient;
    this.tts = new YandexTTS(config);
  }

  async connectToYandexCloud(session: RealtimeSession): Promise<void> {
    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –º–æ–¥–µ–ª–∏
    const { apiKey, folderId, modelName } = this.yandexConfig;
    const url = `${this.yandexConfig.url}?model=gpt://${folderId}/${modelName}`;
    
    console.log(`[${session.id}] üåê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Yandex Cloud: ${url}`);
    
    const yandexWs = new WebSocket(url, {
      headers: {
        'Authorization': `api-key ${apiKey}`
      }
    });

    session.yandexWs = yandexWs;

    yandexWs.on('open', async () => {
      console.log(`[${session.id}] ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ Yandex Cloud`);
      // –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
      this.selectedProfile = getRandomProfile();
      console.log(`[${session.id}] üé§ –í—ã–±—Ä–∞–Ω –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç: ${this.selectedProfile.displayName} (${this.selectedProfile.gender})`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Å—Å–∏–∏
      const sessionConfig = {
        type: 'session.update',
        session: {
          modalities: ['text', 'audio'],
          instructions: this.getSystemInstructions(),
          voice: this.selectedProfile.name,
          input_audio_format: 'pcm16',
          output_audio_format: 'pcm16',
          input_audio_transcription: {
            model: 'whisper-1'
          },
          turn_detection: {
            type: 'server_vad',
            threshold: 0.5,
            prefix_padding_ms: 300,
            silence_duration_ms: 500
          },
          tools: this.getToolDefinitions(),
          tool_choice: 'auto',
          temperature: 0.8,
          max_response_output_tokens: 4096,
          speed: 1.0
        }
      };

      console.log(`[${session.id}] ‚öôÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏`);
      this.sendToYandex(session, sessionConfig);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ TTS API
      setTimeout(async () => {
        try {
          console.log(`[${session.id}] üéµ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —á–µ—Ä–µ–∑ TTS API`);
          
          const greeting = await this.tts.createGreeting(this.selectedProfile!);
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
          this.sendToClient(session, {
            type: 'history_added',
            item: {
              type: 'message',
              role: 'assistant',
              content: [
                {
                  type: 'text',
                  text: greeting.text
                }
              ]
            }
          });

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
          this.sendToClient(session, {
            type: 'audio',
            audio: greeting.audio.toString('base64'),
            sampleRate: greeting.sampleRate // –ü–µ—Ä–µ–¥–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
          });

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—É–¥–∏–æ
          this.sendToClient(session, {
            type: 'audio_end'
          });

          console.log(`[${session.id}] ‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (${greeting.audio.length} –±–∞–π—Ç –∞—É–¥–∏–æ)`);
        } catch (error) {
          console.error(`[${session.id}] ‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è:`, error);
          
          // Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
          const fallbackText = `–ü—Ä–∏–≤–µ—Ç! –Ø ${this.selectedProfile?.displayName}. –ö–∞–∫ –¥–µ–ª–∞? –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?`;
          this.sendToClient(session, {
            type: 'history_added',
            item: {
              type: 'message',
              role: 'assistant',
              content: [
                {
                  type: 'text',
                  text: fallbackText
                }
              ]
            }
          });
        }
      }, 500);
    });

    yandexWs.on('message', (data: any) => {
      // –í–ê–ñ–ù–û: –õ–æ–≥–∏—Ä—É–µ–º –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Yandex, —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –±–æ–ª—å—à–∏—Ö JSON
      const rawMessage = toBuffer(data).toString();
      console.log(`[${session.id}] üî• –ü–û–õ–£–ß–ï–ù–û –û–¢ YANDEX: ${rawMessage.length} —Å–∏–º–≤–æ–ª–æ–≤`);
      
      try {
        const parsed = JSON.parse(rawMessage);
        const sanitized = sanitizeStringsDeep(parsed, 200);
        console.log(`[${session.id}] üî• –°–û–î–ï–†–ñ–ò–ú–û–ï (JSON):`, JSON.stringify(sanitized));
        this.handleYandexMessage(session, toBuffer(data));
      } catch (error) {
        // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ JSON ‚Äî –≤—ã–≤–æ–¥–∏–º —É—Å–µ—á—ë–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
        let logMessage = rawMessage;
        if (rawMessage.length > 500) {
          logMessage = rawMessage.substring(0, 500) + '...';
        }
        console.log(`[${session.id}] üî• –°–û–î–ï–†–ñ–ò–ú–û–ï:`, logMessage);
        console.error(`[${session.id}] ‚ùå –û–®–ò–ë–ö–ê –ü–ê–†–°–ò–ù–ì–ê YANDEX:`, error);
      }
    });

    yandexWs.on('close', (code: number, reason: Buffer) => {
      console.log(`[${session.id}] üîå Yandex Cloud –æ—Ç–∫–ª—é—á–∏–ª—Å—è. –ö–æ–¥: ${code}, –ü—Ä–∏—á–∏–Ω–∞: ${reason}`);
    });

    yandexWs.on('error', (error: any) => {
      console.error(`[${session.id}] ‚ùå –û—à–∏–±–∫–∞ Yandex Cloud WebSocket:`, error);
      this.sendToClient(session, {
        type: 'error',
        error: `–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Yandex Cloud: ${error.message}`
      });
    });
  }

  private handleYandexMessage(session: RealtimeSession, data: Buffer): void {
    try {
      let event = JSON.parse(data.toString());
      console.log(`[${session.id}] üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –æ—Ç Yandex: ${event.type}`);

      // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ + —Å–æ–±—ã—Ç–∏–µ handoff
      if (event.type === 'response.output_item.added' && event.item && event.item.type === 'function_call') {
        const toolName = event.item.name || 'unknown';
        const newAgent = this.getAgentNameForTool(toolName);
        if (newAgent !== session.activeAgent) {
          this.sendToClient(session, {
            type: 'handoff',
            from: session.activeAgent,
            to: newAgent,
          });
          session.activeAgent = newAgent;
        }
      }

      // –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ error-—Å–æ–±—ã—Ç–∏—è –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É (–±–µ–∑ –º—É—Ç–∞—Ü–∏–π –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞)
      if (event.type === 'error' && event.message && !event.error) {
        event = { ...event, error: { error: event.message } };
        delete event.message;
      }

      // –ü–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã, –≤—ã–Ω–µ—Å–µ–Ω–Ω—ã–µ –∏–∑ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
      if (event.type === 'response.audio.delta' && event.delta) {
        this.logErrorThrottled(session.id, 'audio_delta_received', () => {
          console.log(`[${session.id}] üéµ –ü–æ–ª—É—á–µ–Ω–∞ –∞—É–¥–∏–æ –¥–µ–ª—å—Ç–∞ (audio), —Ä–∞–∑–º–µ—Ä: ${event.delta.length} —Å–∏–º–≤–æ–ª–æ–≤`);
        }, 3000);
      }

      if (event.type === 'response.output_audio.delta' && event.delta) {
        this.logErrorThrottled(session.id, 'output_audio_delta_received', () => {
          console.log(`[${session.id}] üéµ –ü–æ–ª—É—á–µ–Ω–∞ –∞—É–¥–∏–æ –¥–µ–ª—å—Ç–∞ (output_audio), —Ä–∞–∑–º–µ—Ä: ${event.delta.length} —Å–∏–º–≤–æ–ª–æ–≤`);
        }, 3000);
      }

      if (event.type === 'response.output_item.added' && event.item?.type === 'function_call') {
        const callId = event.item.call_id;
        const itemId = event.item.id;
        const toolName = event.item.name || 'unknown';
        if (callId) {
          this.pendingFunctionCalls.set(callId, toolName);
        }
        if (itemId) {
          this.pendingFunctionCalls.set(itemId, toolName);
        }
        if (itemId && callId) {
          this.pendingFunctionCallIds.set(itemId, callId);
        }
      }

      if (event.type === 'response.output_item.done' && event.item?.type === 'function_call' && event.item.status === 'completed') {
        this.handleFunctionCall(session, event.item);
      }

      if (event.type === 'response.done' && session.pendingToolResult) {
        const toSpeak = session.pendingToolResult;
        setTimeout(() => {
          this.sendToYandex(session, {
            type: 'conversation.item.create',
            item: {
              type: 'message',
              role: 'user',
              content: [
                { type: 'input_text', text: `–û–∑–≤—É—á—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${toSpeak}` }
              ]
            }
          });

          this.sendToYandex(session, {
            type: 'response.create',
            response: {
              modalities: ['audio'],
              instructions: '–û–∑–≤—É—á—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –∫–æ—Ä–æ—Ç–∫–æ –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ.'
            }
          });
        }, 100);

        session.pendingToolResult = undefined;
      }

      // –ß–∏—Å—Ç–∞—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è –≤ ServerEvent
      const transformed = transformYandexEvent(event, session.activeAgent);
      if (transformed) {
        this.sendToClient(session, transformed);
      }
    } catch (error) {
      console.error(`[${session.id}] ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Yandex:`, error);
    }
  }

  private async handleFunctionCall(session: RealtimeSession, functionCall: any): Promise<void> {
    console.log(`[${session.id}] üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏:`, functionCall.name);

    try {
      // –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –µ—Å–ª–∏ –æ–Ω–∏ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
      let args = functionCall.arguments;
      if (typeof args === 'string') {
        try {
          args = JSON.parse(args);
        } catch (parseError) {
          console.error(`[${session.id}] ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤:`, parseError);
          args = {};
        }
      }

      const result = await this.toolsManager.executeTool(functionCall.name, args);
      
      const resultText = result.success ? result.result : `–û—à–∏–±–∫–∞: ${result.error}`;

      if (!functionCall.call_id) {
        console.error(`[${session.id}] ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç call_id –¥–ª—è function_call_output`);
        return;
      }

      console.log(`[${session.id}] üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ Yandex:`, resultText);
      this.sendToYandex(session, {
        type: 'conversation.item.create',
        item: {
          type: 'function_call_output',
          call_id: functionCall.call_id,
          output: resultText
        }
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º tool_end –∫–ª–∏–µ–Ω—Ç—É
      this.sendToClient(session, {
        type: 'tool_end',
        tool: functionCall.name,
        output: resultText
      });

      // –£–õ–£–ß–®–ï–ù–ù–û–ï –°–û–•–†–ê–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–ê –î–õ–Ø –û–ó–í–£–ß–ò–í–ê–ù–ò–Ø
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –ø—É—Å—Ç–æ–π –∏ —É—Å–ø–µ—à–Ω—ã–π
      if (result.success && resultText.trim()) {
        session.pendingToolResult = resultText;
        console.log(`[${session.id}] üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è:`, resultText);
      }

      console.log(`[${session.id}] ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω`);
    } catch (error) {
      console.error(`[${session.id}] ‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏:`, error);
    }
  }

  sendToYandex(session: RealtimeSession, message: any): void {
    if (session.yandexWs && session.yandexWs.readyState === WebSocket.OPEN) {
      const messageStr = JSON.stringify(message);
      
      // –¢—Ä–æ—Ç–ª–∏–Ω–≥ –¥–ª—è —á–∞—Å—Ç—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      if (message.type === 'input_audio_buffer.append') {
        this.logErrorThrottled(session.id, 'yandex_send_audio', () => {
          console.log(`[${session.id}] üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Yandex: ${message.type}, —Ä–∞–∑–º–µ—Ä: ${messageStr.length} –±–∞–π—Ç`);
        }, 5000);
      } else {
        console.log(`[${session.id}] üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Yandex: ${message.type}, —Ä–∞–∑–º–µ—Ä: ${messageStr.length} –±–∞–π—Ç`);
      }
      
      session.yandexWs.send(messageStr);
    } else {
      console.error(`[${session.id}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Yandex, WebSocket –Ω–µ –≥–æ—Ç–æ–≤. –°–æ—Å—Ç–æ—è–Ω–∏–µ: ${session.yandexWs?.readyState}`);
    }
  }

  logErrorThrottled(sessionId: string, key: string, logFn: () => void, intervalMs = 3000): void {
    const compositeKey = `${sessionId}:${key}`;
    const now = Date.now();
    const last = this.logTimestamps.get(compositeKey) || 0;
    
    if (now - last >= intervalMs) {
      logFn();
      this.logTimestamps.set(compositeKey, now);
    }
  }

  private getSystemInstructions(): string {
    return `# –°–∏—Å—Ç–µ–º–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
–í—ã ‚Äî –≥–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏. 
–û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∫–ª–∏–µ–Ω—Ç–∞ –∫–æ—Ä–æ—Ç–∫–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ. 
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –Ω–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π—Ç–µ –æ—Ç–≤–µ—Ç—ã —Å–∞–º–∏.

–¢—ã ${this.selectedProfile?.displayName || '–ú–∞—Ä–∏–Ω–∞'}, —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–º –≤–æ–ø—Ä–æ—Å–∞–º
–û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤—ã–∑—ã–≤–∞—è –Ω—É–∂–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç.
–û—Ç–≤–µ—á–∞–π—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ—Ä–æ—Ç–∫–æ –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –±–µ–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π –∏ –±–µ–∑ —Ñ—Ä–∞–∑ –≤—Ä–æ–¥–µ "–ß–µ–º –µ—â—ë –º–æ–≥—É –ø–æ–º–æ—á—å?".`;
  }

  private getToolDefinitions(): any[] {
    return [
      {
        type: 'function',
        name: 'faq_lookup_tool',
        description: '–ü—Ä–æ—Å—Ç–µ–π—à–∏–π –ø–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–º –≤–æ–ø—Ä–æ—Å–∞–º.',
        parameters: {
          type: 'object',
          properties: {
            question: {
              type: 'string',
              description: '–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
            }
          },
          required: ['question']
        }
      },
      {
        type: 'function',
        name: 'convert_temperature_tool',
        description: '–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –∏–∑ –≥—Ä–∞–¥—É—Å–æ–≤ –¶–µ–ª—å—Å–∏—è –≤ –§–∞—Ä–µ–Ω–≥–µ–π—Ç—ã.',
        parameters: {
          type: 'object',
          properties: {
            value_celsius: {
              type: 'number',
              description: '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö –¶–µ–ª—å—Å–∏—è'
            }
          },
          required: ['value_celsius']
        }
      }
    ];
  }

  private getAgentNameForTool(toolName: string): string {
    switch (toolName) {
      case 'convert_temperature_tool':
        return 'Temperature Agent';
      case 'faq_lookup_tool':
        return 'FAQ Agent';
      default:
        return 'General Agent';
    }
  }
}