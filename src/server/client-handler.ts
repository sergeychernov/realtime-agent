import { WebSocket } from 'ws';
import { RealtimeSession, AudioMessage, TextMessage, ServerEvent } from '../common/types.js';
import { toBuffer } from '../common/utils.js';

export interface IYandexHandler {
  sendToYandex(session: RealtimeSession, message: any): void;
  logErrorThrottled(sessionId: string, key: string, logFn: () => void, intervalMs?: number): void;
}

export class ClientHandler {
  private yandexHandler: IYandexHandler;
  private sendToClient: (session: RealtimeSession, event: ServerEvent) => void;

  constructor(
    yandexHandler: IYandexHandler,
    sendToClient: (session: RealtimeSession, event: ServerEvent) => void
  ) {
    this.yandexHandler = yandexHandler;
    this.sendToClient = sendToClient;
  }

  handleMessage(session: RealtimeSession, data: Buffer): void {
    try {
      const message = JSON.parse(data.toString()) as any;
      
      // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ-–∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      if (message.type !== 'audio') {
        console.log(`[${session.id}] üìã –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: ${message.type}`);
      }

      switch (message.type) {
        case 'audio':
          // –¢—Ä–æ—Ç–ª–∏–Ω–≥ –¥–ª—è –∞—É–¥–∏–æ –ª–æ–≥–æ–≤
          this.yandexHandler.logErrorThrottled(session.id, 'audio_received', () => {
            console.log(`[${session.id}] üéµ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏—è, —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: ${message.data?.length || 0} —Å—ç–º–ø–ª–æ–≤`);
          }, 5000);
          this.handleAudioMessage(session, message as AudioMessage);
          break;
        case 'text_message':
          console.log(`[${session.id}] üí¨ –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${message.text}"`);
          this.handleTextMessage(session, message as TextMessage);
          break;
        case 'commit_audio':
          console.log(`[${session.id}] üéµ –ö–æ–º–º–∏—Ç –∞—É–¥–∏–æ`);
          this.handleCommitAudio(session);
          break;
        case 'interrupt':
          console.log(`[${session.id}] ‚èπÔ∏è –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ`);
          this.handleInterrupt(session);
          break;
        default:
          console.warn(`[${session.id}] ‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: ${message.type}`);
      }
    } catch (error) {
      console.error(`[${session.id}] ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:`, error);
      this.sendToClient(session, {
        type: 'error',
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è'
      });
    }
  }

  private handleTextMessage(session: RealtimeSession, message: TextMessage): void {
    console.log(`[${session.id}] üí¨ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Yandex: "${message.text}"`);
    
    if (session.yandexWs && session.yandexWs.readyState === WebSocket.OPEN) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ conversation item
      this.yandexHandler.sendToYandex(session, {
        type: 'conversation.item.create',
        item: {
          type: 'message',
          role: 'user',
          content: [
            {
              type: 'input_text',
              text: message.text
            }
          ]
        }
      });
      
      console.log(`[${session.id}] üöÄ –ó–∞–ø—Ä–æ—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞`);
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç
      this.yandexHandler.sendToYandex(session, {
        type: 'response.create'
      });
    } else {
      console.error(`[${session.id}] ‚ùå Yandex WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∏–ª–∏ –Ω–µ –≥–æ—Ç–æ–≤. –°–æ—Å—Ç–æ—è–Ω–∏–µ: ${session.yandexWs?.readyState}`);
      this.sendToClient(session, {
        type: 'error',
        error: '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Yandex Cloud –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'
      });
    }
  }

  private handleAudioMessage(session: RealtimeSession, message: AudioMessage): void {
    if (session.yandexWs && session.yandexWs.readyState === WebSocket.OPEN) {
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º int16 array –≤ bytes
      const audioBuffer = Buffer.alloc(message.data.length * 2);
      for (let i = 0; i < message.data.length; i++) {
        const value = message.data[i];
        if (value !== undefined) {
          audioBuffer.writeInt16LE(value, i * 2);
        }
      }

      const base64Audio = audioBuffer.toString('base64');
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –≤ Yandex Cloud
      this.yandexHandler.sendToYandex(session, {
        type: 'input_audio_buffer.append',
        audio: base64Audio
      });
      
      // –¢—Ä–æ—Ç–ª–∏–Ω–≥ –¥–ª—è –∞—É–¥–∏–æ –ª–æ–≥–æ–≤
      this.yandexHandler.logErrorThrottled(session.id, 'audio_sent', () => {
        console.log(`[${session.id}] üéµ –ê—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Yandex, base64 —Ä–∞–∑–º–µ—Ä: ${base64Audio.length} —Å–∏–º–≤–æ–ª–æ–≤`);
      }, 5000);
    } else {
      this.yandexHandler.logErrorThrottled(session.id, 'yandex_ws_audio_not_connected', () => {
        console.error(`[${session.id}] ‚ùå Yandex WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è –∞—É–¥–∏–æ. –°–æ—Å—Ç–æ—è–Ω–∏–µ: ${session.yandexWs?.readyState}`);
      }, 3000);
    }
  }

  private handleCommitAudio(session: RealtimeSession): void {
    console.log(`[${session.id}] üéµ –ö–æ–º–º–∏—Ç –∞—É–¥–∏–æ –±—É—Ñ–µ—Ä–∞`);
    this.yandexHandler.sendToYandex(session, {
      type: 'input_audio_buffer.commit'
    });
    
    console.log(`[${session.id}] üîÑ –ê—É–¥–∏–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ, –æ–∂–∏–¥–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∫–æ–Ω—Ü–∞ —Ä–µ—á–∏`);
  }

  private handleInterrupt(session: RealtimeSession): void {
    console.log(`[${session.id}] ‚èπÔ∏è –û—Ç–º–µ–Ω–∞ –æ—Ç–≤–µ—Ç–∞`);
    this.yandexHandler.sendToYandex(session, {
      type: 'response.cancel'
    });
  }
}