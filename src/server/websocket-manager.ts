import { WebSocket } from 'ws';
import { YandexCloudConfig, RealtimeSession, ServerEvent } from '../common/types.js';
import { toBuffer } from '../common/utils.js';
import { ClientHandler } from './client-handler.js';
import { YandexHandler } from './yandex-handler.js';

export class RealtimeWebSocketManager {
  private sessions: Map<string, RealtimeSession> = new Map();
  private yandexHandler: YandexHandler;
  private clientHandler: ClientHandler;

  constructor(config: YandexCloudConfig) {
    this.yandexHandler = new YandexHandler(config, this.sendToClient.bind(this));
    this.clientHandler = new ClientHandler(this.yandexHandler, this.sendToClient.bind(this));
  }

  async connect(websocket: any, sessionId: string): Promise<void> {
    console.log(`[${sessionId}] üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏`);
    
    const session: RealtimeSession = {
      id: sessionId,
      websocket,
      yandexWs: undefined,
      imageBuffers: new Map(),
      isConnected: true,
      activeAgent: 'FAQ Agent',
      defaultAgent: 'FAQ Agent'
    };

    this.sessions.set(sessionId, session);

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Yandex Cloud Realtime API
    await this.yandexHandler.connectToYandexCloud(session);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
    websocket.on('message', (data: any) => {
      const session = this.sessions.get(sessionId);
      if (session) {
        this.clientHandler.handleMessage(session, toBuffer(data));
      }
    });

    websocket.on('close', () => {
      console.log(`[${sessionId}] üîå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è`);
      this.disconnect(sessionId);
    });

    websocket.on('error', (error: any) => {
      console.error(`[${sessionId}] ‚ùå –û—à–∏–±–∫–∞ WebSocket –∫–ª–∏–µ–Ω—Ç–∞:`, error);
      this.disconnect(sessionId);
    });
  }

  private sendToClient(session: RealtimeSession, event: ServerEvent): void {
    if (session.websocket.readyState === WebSocket.OPEN) {
      const eventStr = JSON.stringify(event);
      
      // –í–ê–ñ–ù–û: –õ–æ–≥–∏—Ä—É–µ–º –í–°–ï –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç—É
      console.log(`[${session.id}] üì§ –û–¢–ü–†–ê–í–ö–ê –ö–õ–ò–ï–ù–¢–£: ${event.type}, —Ä–∞–∑–º–µ—Ä: ${eventStr.length} –±–∞–π—Ç`);
      
      session.websocket.send(eventStr);
      
      console.log(`[${session.id}] ‚úÖ –°–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É —É—Å–ø–µ—à–Ω–æ`);
    } else {
      console.error(`[${session.id}] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É, WebSocket –Ω–µ –≥–æ—Ç–æ–≤. –°–æ—Å—Ç–æ—è–Ω–∏–µ: ${session.websocket.readyState}`);
    }
  }

  disconnect(sessionId: string): void {
    const session = this.sessions.get(sessionId);
    if (session) {
      console.log(`[${sessionId}] üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏`);
      
      if (session.yandexWs) {
        session.yandexWs.close();
      }
      
      session.isConnected = false;
      this.sessions.delete(sessionId);
      
      console.log(`[${sessionId}] ‚úÖ –°–µ—Å—Å–∏—è —É–¥–∞–ª–µ–Ω–∞`);
    }
  }
}
