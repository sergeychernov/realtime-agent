import 'dotenv/config'; // –í–ê–ñ–ù–û: –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ
import express from 'express';
import { createServer } from 'http';
import { createServer as createHttpsServer } from 'https';
import { WebSocketServer } from 'ws';
import path from 'path';
import { v4 as uuidv4 } from 'uuid';
import fs from 'fs';
import { fileURLToPath } from 'url';
import { YandexCloudConfig } from '../common/types.js';
import { RealtimeWebSocketManager } from './websocket-manager.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Yandex Cloud - —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è
// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Yandex Cloud - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL
const yandexConfig: YandexCloudConfig = {
  apiKey: process.env.YANDEX_API_KEY || '',
  folderId: process.env.YANDEX_FOLDER_ID || '',
  modelName: process.env.YANDEX_MODEL_NAME || 'speech-realtime-250923',
  url: process.env.YANDEX_WEBSOCKET_URL || 'wss://rest-assistant.api.cloud.yandex.net/v1/realtime/openai'
};

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å
console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
console.log('   YANDEX_API_KEY:', process.env.YANDEX_API_KEY ? `${process.env.YANDEX_API_KEY.substring(0, 10)}...` : '–ù–ï –ó–ê–î–ê–ù');
console.log('   YANDEX_FOLDER_ID:', process.env.YANDEX_FOLDER_ID || '–ù–ï –ó–ê–î–ê–ù');
console.log('   YANDEX_MODEL_NAME:', process.env.YANDEX_MODEL_NAME || '–ù–ï –ó–ê–î–ê–ù');
console.log('   YANDEX_WEBSOCKET_URL:', yandexConfig.url);

if (!yandexConfig.apiKey || !yandexConfig.folderId) {
  console.error('‚ùå –û–®–ò–ë–ö–ê: –ù–µ –∑–∞–¥–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è YANDEX_API_KEY –∏–ª–∏ YANDEX_FOLDER_ID');
  console.error('   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞');
  process.exit(1);
}

const manager = new RealtimeWebSocketManager(yandexConfig);

// –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—É—Ç–∏
const projectRoot = path.resolve(__dirname, '../../');
const clientDistPath = path.join(projectRoot, 'src/client/dist');

console.log('üìÅ –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º:');
console.log('   __dirname:', __dirname);
console.log('   Project root:', projectRoot);
console.log('   Client dist:', clientDistPath);
console.log('   Client dist exists:', fs.existsSync(clientDistPath));

// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ React –∫–ª–∏–µ–Ω—Ç
if (fs.existsSync(clientDistPath)) {
  console.log('üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–π React –∫–ª–∏–µ–Ω—Ç');
  app.use(express.static(clientDistPath));
} else {
  console.log('‚ö†Ô∏è React –∫–ª–∏–µ–Ω—Ç –Ω–µ —Å–æ–±—Ä–∞–Ω! –ó–∞–ø—É—Å—Ç–∏—Ç–µ: cd src/client && npm run build');
}

// –ú–∞—Ä—à—Ä—É—Ç—ã
app.get('/', (req, res) => {
  if (fs.existsSync(clientDistPath)) {
    res.sendFile(path.join(clientDistPath, 'index.html'));
  } else {
    res.send(`
      <!DOCTYPE html>
      <html lang="ru">
      <head>
          <meta charset="UTF-8">
          <title>–û—à–∏–±–∫–∞</title>
      </head>
      <body>
          <h1>React –∫–ª–∏–µ–Ω—Ç –Ω–µ —Å–æ–±—Ä–∞–Ω</h1>
          <p>–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—ã:</p>
          <pre>cd src/client && npm install && npm run build</pre>
      </body>
      </html>
    `);
  }
});

app.get('/health', (req, res) => {
  res.json({ status: 'ok', timestamp: new Date().toISOString() });
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = parseInt(process.env.PORT || '8000', 10);
const HOST = process.env.HOST || '0.0.0.0';

// –ò—â–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
const certPath = path.join(projectRoot, 'cert.pem');
const keyPath = path.join(projectRoot, 'key.pem');

console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã:');
console.log('   Cert path:', certPath);
console.log('   Key path:', keyPath);
console.log('   Cert exists:', fs.existsSync(certPath));
console.log('   Key exists:', fs.existsSync(keyPath));

const useHttps = fs.existsSync(certPath) && fs.existsSync(keyPath);

let server: import('http').Server | import('https').Server;

if (useHttps) {
  console.log('üîí –ó–∞–≥—Ä—É–∂–∞–µ–º SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã...');
  
  try {
    const options = {
      cert: fs.readFileSync(certPath),
      key: fs.readFileSync(keyPath)
    };
    server = createHttpsServer(options, app);
    console.log('‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤:', error);
    console.log('üîì –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ HTTP');
    server = createServer(app);
  }
} else {
  console.log('üîì SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º HTTP');
  server = createServer(app);
}

const wss = new WebSocketServer({ server });

// –û–±—Ä–∞–±–æ—Ç–∫–∞ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
wss.on('connection', (ws, req) => {
  const sessionId = uuidv4();
  console.log(`üîå –ù–æ–≤–æ–µ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: ${sessionId}`);
  
  manager.connect(ws, sessionId);
});

server.listen(PORT, HOST, () => {
  const actualProtocol = useHttps ? 'https' : 'http';
  const wsProtocol = useHttps ? 'wss' : 'ws';
  
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω:`);
  console.log(`   ${actualProtocol.toUpperCase()}: ${actualProtocol}://${HOST}:${PORT}`);
  console.log(`   WebSocket: ${wsProtocol}://${HOST}:${PORT}`);
  console.log(`   SSL: ${useHttps ? '–≤–∫–ª—é—á–µ–Ω' : '–æ—Ç–∫–ª—é—á–µ–Ω'}`);
  
  if (useHttps) {
    console.log(`üåê –û—Ç–∫—Ä–æ–π—Ç–µ: https://localhost:${PORT}`);
    console.log(`‚ö†Ô∏è  –ï—Å–ª–∏ –±—Ä–∞—É–∑–µ—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ - –Ω–∞–∂–º–∏—Ç–µ "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ" ‚Üí "–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ localhost"`);
  } else {
    console.log(`üåê –û—Ç–∫—Ä–æ–π—Ç–µ: http://localhost:${PORT}`);
    console.log(`‚ö†Ô∏è  –î–ª—è —Ä–∞–±–æ—Ç—ã –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –Ω—É–∂–µ–Ω HTTPS!`);
  }
});

// Graceful shutdown
process.on('SIGTERM', () => {
  console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  server.close(() => {
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    process.exit(0);
  });
});

export { app, server, manager };