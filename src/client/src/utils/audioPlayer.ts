class AudioPlayer {
  private audioContext: AudioContext | null = null;
  private currentSource: AudioBufferSourceNode | null = null;
  private isPlaying: boolean = false;
  private audioQueue: Array<{audio: string, sampleRate?: number}> = [];
  private isProcessingQueue: boolean = false;

  async initialize() {
    if (!this.audioContext) {
      this.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ AudioContext
    if (this.audioContext.state === 'suspended') {
      await this.audioContext.resume();
      console.log('üéµ AudioContext –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω');
    }
  }

  async playAudio(base64Audio: string, sampleRate?: number): Promise<void> {
    console.log('üéµ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞—É–¥–∏–æ –≤ –æ—á–µ—Ä–µ–¥—å, —Ä–∞–∑–º–µ—Ä:', base64Audio.length, '—á–∞—Å—Ç–æ—Ç–∞:', sampleRate);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
    this.audioQueue.push({audio: base64Audio, sampleRate});
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏ –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞
    if (!this.isProcessingQueue) {
      this.processQueue();
    }
  }

  private async processQueue(): Promise<void> {
    if (this.isProcessingQueue || this.audioQueue.length === 0) {
      return;
    }

    this.isProcessingQueue = true;

    while (this.audioQueue.length > 0) {
      const audioItem = this.audioQueue.shift()!;
      
      try {
        await this.playAudioImmediate(audioItem.audio, audioItem.sampleRate);
        
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        while (this.isPlaying) {
          await new Promise(resolve => setTimeout(resolve, 100));
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ –∏–∑ –æ—á–µ—Ä–µ–¥–∏:', error);
      }
    }

    this.isProcessingQueue = false;
  }

  private async playAudioImmediate(base64Audio: string, sampleRate?: number): Promise<void> {
    try {
      await this.initialize();
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
      this.stopImmediate();

      const audioData = atob(base64Audio);
      console.log('üéµ –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω—ã base64 –¥–∞–Ω–Ω—ã–µ, —Ä–∞–∑–º–µ—Ä:', audioData.length);
      
      // –°–æ–∑–¥–∞–µ–º ArrayBuffer –¥–ª—è –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
      const arrayBuffer = new ArrayBuffer(audioData.length);
      const view = new Uint8Array(arrayBuffer);
      
      for (let i = 0; i < audioData.length; i++) {
        view[i] = audioData.charCodeAt(i);
      }

      let audioBuffer: AudioBuffer;

      try {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ –≥–æ—Ç–æ–≤—ã–π –∞—É–¥–∏–æ —Ñ–∞–π–ª
        const arrayBufferCopy = arrayBuffer.slice(0);
        audioBuffer = await this.audioContext!.decodeAudioData(arrayBufferCopy);
        console.log('üéµ –ê—É–¥–∏–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–∫ –≥–æ—Ç–æ–≤—ã–π —Ñ–∞–π–ª, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:', audioBuffer.duration, '—Å–µ–∫');
      } catch (decodeError) {
        console.log('üéµ –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ –≥–æ—Ç–æ–≤—ã–π —Ñ–∞–π–ª, –ø—Ä–æ–±—É–µ–º –∫–∞–∫ PCM16');
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π ArrayBuffer –¥–ª—è PCM –æ–±—Ä–∞–±–æ—Ç–∫–∏
        const pcmArrayBuffer = new ArrayBuffer(audioData.length);
        const pcmView = new Uint8Array(pcmArrayBuffer);
        
        for (let i = 0; i < audioData.length; i++) {
          pcmView[i] = audioData.charCodeAt(i);
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ PCM16 –¥–∞–Ω–Ω—ã–µ
        const pcmData = new Int16Array(pcmArrayBuffer);
        const usedSampleRate = sampleRate || 44100; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é —á–∞—Å—Ç–æ—Ç—É –∏–ª–∏ 44.1kHz –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const numberOfChannels = 1; // –ú–æ–Ω–æ
        
        console.log('üéµ –ò—Å–ø–æ–ª—å–∑—É–µ–º —á–∞—Å—Ç–æ—Ç—É –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏:', usedSampleRate, 'Hz');
        
        // –°–æ–∑–¥–∞–µ–º AudioBuffer –¥–ª—è PCM –¥–∞–Ω–Ω—ã—Ö
        audioBuffer = this.audioContext!.createBuffer(
          numberOfChannels,
          pcmData.length,
          usedSampleRate
        );
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Int16 –≤ Float32 –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –±—É—Ñ–µ—Ä
        const channelData = audioBuffer.getChannelData(0);
        for (let i = 0; i < pcmData.length; i++) {
          channelData[i] = pcmData[i] / 32768.0; // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ—Ç -32768..32767 –∫ -1..1
        }
        
        console.log('üéµ PCM16 –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:', audioBuffer.duration, '—Å–µ–∫');
      }

      // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º
      this.currentSource = this.audioContext!.createBufferSource();
      this.currentSource.buffer = audioBuffer;
      this.currentSource.connect(this.audioContext!.destination);
      
      this.currentSource.onended = () => {
        this.isPlaying = false;
        this.currentSource = null;
        console.log('üéµ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
      };
      
      this.isPlaying = true;
      this.currentSource.start();
      console.log('üéµ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ –∑–∞–ø—É—â–µ–Ω–æ');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ:', error);
      this.isPlaying = false;
      this.currentSource = null;
    }
  }

  stop(): void {
    // –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å
    this.audioQueue = [];
    this.stopImmediate();
  }

  private stopImmediate(): void {
    if (this.currentSource && this.isPlaying) {
      try {
        this.currentSource.stop();
        console.log('üéµ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
      }
      this.currentSource = null;
      this.isPlaying = false;
    }
  }

  getIsPlaying(): boolean {
    return this.isPlaying;
  }

  getQueueLength(): number {
    return this.audioQueue.length;
  }

  destroy(): void {
    this.stop();
    if (this.audioContext) {
      this.audioContext.close();
      this.audioContext = null;
    }
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const audioPlayer = new AudioPlayer();